import os
import csv
import fitz  # PyMuPDF for PDF processing
import cv2
import re
import easyocr  # Import EasyOCR
import numpy as np

# Initialize EasyOCR reader (Japanese language) - do this once outside the loop for efficiency
reader = easyocr.Reader(['ja']) # need to run only once to load model into memory


def ocr_easyocr(image_path, reader):
    """Performs OCR on an image file using EasyOCR."""
    print(f"Debug: Starting EasyOCR on {image_path}")
    result = reader.readtext(image_path, detail=0) # detail=0 for just text list
    text = '\n'.join(result) # Join lines of text with newline
    print(f"Debug: EasyOCR finished on {image_path}, output length: {len(text)}")
    return text


def pdf_to_images(pdf_path, output_folder, dpi=300):
    """
    Converts a multi-page PDF to images at high DPI and saves them.
    Returns a list of saved image file paths.
    Increased DPI for better quality starting point.
    """
    print(f"Debug: Starting pdf_to_images with pdf_path: {pdf_path}, output_folder: {output_folder}") # Debug print
    doc = fitz.open(pdf_path)
    images = []
    pdf_name = os.path.splitext(os.path.basename(pdf_path))[0]  # Get PDF file name without extension
    print(f"Debug: PDF '{pdf_path}' opened, number of pages: {doc.page_count}") # Debug print

    for i, page in enumerate(doc):
        print(f"Debug: Processing page {i+1} of PDF '{pdf_path}'") # Debug print
        zoom = dpi / 72  # Calculate zoom factor based on DPI (72 is the default DPI)
        matrix = fitz.Matrix(zoom, zoom)  # Create transformation matrix for higher resolution
        pix = page.get_pixmap(matrix=matrix)  # Use the matrix for higher resolution
        img_path = os.path.join(output_folder, f"{pdf_name}_page_{i+1}.png")
        print(f"Debug: Saving page {i+1} as high-res image to: {img_path}") # Debug print
        pix.save(img_path)  # Save high-resolution image
        images.append(img_path)
    print(f"Debug: Finished converting PDF '{pdf_path}' to images. Total images saved: {len(images)}") # Debug print
    return images

def preprocess_image(image_path, save_debug=True):
    """
    Advanced image enhancement for better OCR accuracy:
    - Upscales image
    - Converts to grayscale
    - Applies CLAHE for adaptive contrast enhancement
    - Denoises the image
    - Applies adaptive thresholding
    - Optional morphological operations
    """
    print(f"Debug: Starting enhanced preprocess_image with image_path: {image_path}") # Debug print
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error: Could not read {image_path}")
        return None
    
    debug_folder = os.path.join(os.path.dirname(image_path), "debug_preprocessing")
    if save_debug:
        os.makedirs(debug_folder, exist_ok=True)
        base_name = os.path.basename(image_path).split('.')[0]
    
    # 1. Upscale the image (if needed) - using bicubic interpolation
    height, width = image.shape[:2]
    if max(height, width) < 2000:  # Only upscale if image is small
        scale_factor = 2
        image = cv2.resize(image, (width * scale_factor, height * scale_factor), 
                          interpolation=cv2.INTER_CUBIC)
        print(f"Debug: Image upscaled from {width}x{height} to {width*scale_factor}x{height*scale_factor}")
    
    if save_debug:
        cv2.imwrite(os.path.join(debug_folder, f"{base_name}_1_upscaled.png"), image)
    
    # 2. Convert to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    print(f"Debug: Image converted to grayscale")
    
    if save_debug:
        cv2.imwrite(os.path.join(debug_folder, f"{base_name}_2_gray.png"), gray)
    
    # 3. Apply CLAHE (Contrast Limited Adaptive Histogram Equalization) for better contrast
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    gray_clahe = clahe.apply(gray)
    print(f"Debug: Applied CLAHE for contrast enhancement")
    
    if save_debug:
        cv2.imwrite(os.path.join(debug_folder, f"{base_name}_3_clahe.png"), gray_clahe)
    
    # 4. Apply bilateral filter to reduce noise while preserving edges
    denoised = cv2.bilateralFilter(gray_clahe, 11, 17, 17)
    print(f"Debug: Applied bilateral filter for noise reduction")
    
    if save_debug:
        cv2.imwrite(os.path.join(debug_folder, f"{base_name}_4_denoised.png"), denoised)
    
    # 5. Apply adaptive thresholding with optimized parameters
    # Try different block sizes and constant values for best results
    block_size = 15  # Must be odd
    constant = 8     # Typically between 2 and 10
    binary = cv2.adaptiveThreshold(
        denoised,
        255,
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
        cv2.THRESH_BINARY,
        block_size,
        constant
    )
    print(f"Debug: Applied adaptive thresholding with block size {block_size} and constant {constant}")
    
    if save_debug:
        cv2.imwrite(os.path.join(debug_folder, f"{base_name}_5_thresholded.png"), binary)
    
    # 6. Optional: Apply morphological operations to enhance text
    # This can help with connecting broken characters or removing noise
    kernel = np.ones((1, 1), np.uint8)
    processed = cv2.morphologyEx(binary, cv2.MORPH_CLOSE, kernel)
    print(f"Debug: Applied morphological closing to enhance text")
    
    if save_debug:
        cv2.imwrite(os.path.join(debug_folder, f"{base_name}_6_morphology.png"), processed)
        print(f"Debug: Saved preprocessing debug images to {debug_folder}")
    
    # Save the final preprocessed image next to the original
    preprocessed_path = image_path.replace('.png', '_preprocessed.png')
    cv2.imwrite(preprocessed_path, processed)
    print(f"Debug: Saved final preprocessed image to {preprocessed_path}")
    
    print(f"Debug: Finished enhanced preprocess_image for {image_path}")
    
    return processed

def extract_transaction_info(text):
    """
    Extracts transaction details from OCR text using regex.
    """
    print(f"Debug: Starting extract_transaction_info with text: \n-----\n{text}\n-----") # Debug print
    sender_pattern = r"送信者\s*[:\-]\s*(.+)"  # Sender (送信者)
    receiver_pattern = r"受信者[s]?\s*[:\-]\s*(.+)"  # Receiver (受信者)
    amount_pattern = r"金額\s*[:\-]\s*¥?([\d,]+\.?\d*)"  # Amount (金額)
    date_pattern = r"(?:日付|取引日)\s*[:\-]\s*([\d]{4}[-/][\d]{1,2}[-/][\d]{1,2})"  # Date (日付/取引日)

    sender = re.search(sender_pattern, text, re.IGNORECASE)
    receiver = re.search(receiver_pattern, text, re.IGNORECASE)
    amount = re.search(amount_pattern, text, re.IGNORECASE)
    date = re.search(date_pattern, text, re.IGNORECASE)

    sender_value = sender.group(1).strip() if sender else ""
    receiver_value = receiver.group(1).strip() if receiver else ""
    amount_value = amount.group(1).strip() if amount else ""
    date_value = date.group(1).strip() if date else ""

    print(f"Debug: Extracted Sender: '{sender_value}', Receiver: '{receiver_value}', Amount: '{amount_value}', Date: '{date_value}'") # Debug print
    return (
        sender_value,
        receiver_value,
        amount_value,
        date_value
    )

def process_documents(input_folder, image_output_folder, output_csv):
    """
    Processes all PDFs in the input folder:
    - Converts PDFs to images at high DPI
    - Enhances images using advanced OpenCV techniques
    - Extracts text using OCR (EasyOCR)
    - Parses transaction details using regex
    - Saves results to a CSV file
    """
    print(f"Debug: Starting process_documents with input_folder: {input_folder}, image_output_folder: {image_output_folder}, output_csv: {output_csv}") # Debug print
    os.makedirs(image_output_folder, exist_ok=True)  # Ensure output folder exists
    print(f"Debug: Image output folder '{image_output_folder}' created or already exists.") # Debug print

    with open(output_csv, mode="w", newline="", encoding="utf-8") as csv_file:
        writer = csv.writer(csv_file)
        writer.writerow(["Original File", "Page Image", "Preprocessed Image", "Sender", "Receiver", "Amount", "Transaction Date", "Raw OCR Output", "OCR Engine"]) # Added Preprocessed Image and OCR Engine columns
        print(f"Debug: CSV file '{output_csv}' opened for writing.") # Debug print

        for filename in os.listdir(input_folder):
            if filename.lower().endswith(".pdf"):
                pdf_path = os.path.join(input_folder, filename)
                print(f"Processing PDF file: {filename} using EasyOCR with enhanced preprocessing...") # User friendly print
                print(f"Debug: Full PDF path: {pdf_path}") # Debug print

                # Convert PDF to high-resolution images
                image_paths = pdf_to_images(pdf_path, image_output_folder, dpi=300)
                print(f"Debug: Number of high-res images generated from PDF '{filename}': {len(image_paths)}") # Debug print

                for img_path in image_paths:
                    print(f"Debug: Processing image: {img_path}") # Debug print
                    processed_img = preprocess_image(img_path, save_debug=True)
                    if processed_img is None:
                        print(f"Debug: preprocess_image returned None for {img_path}, skipping OCR.") # Debug print
                        continue

                    # Generate preprocessed image path
                    preprocessed_path = img_path.replace('.png', '_preprocessed.png')
                    
                    # Perform OCR using EasyOCR on the preprocessed image
                    print(f"Debug: Performing OCR using EasyOCR on preprocessed image")
                    text = ocr_easyocr(preprocessed_path, reader)
                    print(f"Debug: EasyOCR output length: {len(text)}")

                    sender, receiver, amount, date = extract_transaction_info(text)

                    writer.writerow([filename, img_path, preprocessed_path, sender, receiver, amount, date, text, "EasyOCR"]) # Added preprocessed image path
                    print(f"Extracted from {img_path} (EasyOCR): Sender='{sender}', Receiver='{receiver}', Amount='{amount}', Date='{date}'") # User friendly print

                print(f"Debug: Finished processing PDF file: {filename}") # Debug print
        print(f"Debug: Finished processing all PDF files in input folder.") # Debug print
    print("Transaction data extraction complete with enhanced image preprocessing. Results saved to", output_csv) # User friendly print

if __name__ == "__main__":
    input_folder = "/content/testing"  # <--- CHANGE THIS TO YOUR INPUT PDF FOLDER
    image_output_folder = "path/to/output_images_easyocr" # <--- CHANGE THIS FOR EASYOCR IMAGES
    output_csv = "transaction_data_easyocr_enhanced.csv" # <--- CHANGED CSV NAME TO REFLECT ENHANCED PREPROCESSING

    print(f"Debug: Input folder: {input_folder}") # Debug print
    print(f"Debug: Image output folder: {image_output_folder}") # Debug print
    print(f"Debug: Output CSV file: {output_csv}") # Debug print
    process_documents(input_folder, image_output_folder, output_csv)
    print("Transaction data extraction process completed with enhanced image preprocessing.") # More explicit completion message
